// Code generated by protoc-gen-go.
// source: UnProtos/Messaging/Responses/GetChankResponse.proto
// DO NOT EDIT!

package UnProtos_Messaging_Responses

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetChunkResponse_Result int32

const (
	GetChunkResponse_UNSET   GetChunkResponse_Result = 0
	GetChunkResponse_SUCCESS GetChunkResponse_Result = 1
)

var GetChunkResponse_Result_name = map[int32]string{
	0: "UNSET",
	1: "SUCCESS",
}
var GetChunkResponse_Result_value = map[string]int32{
	"UNSET":   0,
	"SUCCESS": 1,
}

func (x GetChunkResponse_Result) String() string {
	return proto.EnumName(GetChunkResponse_Result_name, int32(x))
}
func (GetChunkResponse_Result) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// GetChunkResponse определяет чанк карты
type GetChunkResponse struct {
	Result GetChunkResponse_Result `protobuf:"varint,1,opt,name=result,enum=UnProtos.Messaging.Responses.GetChunkResponse_Result" json:"result,omitempty"`
	// index определяет индекс чанка
	Index int32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// tiles определяет тайлы чанка
	Tiles []*GetChunkResponse_Tile `protobuf:"bytes,3,rep,name=tiles" json:"tiles,omitempty"`
}

func (m *GetChunkResponse) Reset()                    { *m = GetChunkResponse{} }
func (m *GetChunkResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChunkResponse) ProtoMessage()               {}
func (*GetChunkResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetChunkResponse) GetResult() GetChunkResponse_Result {
	if m != nil {
		return m.Result
	}
	return GetChunkResponse_UNSET
}

func (m *GetChunkResponse) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetChunkResponse) GetTiles() []*GetChunkResponse_Tile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

// Tile определяет один тайл карты
type GetChunkResponse_Tile struct {
	Ground int32 `protobuf:"varint,1,opt,name=ground" json:"ground,omitempty"`
	Block  int32 `protobuf:"varint,2,opt,name=block" json:"block,omitempty"`
	Detail int32 `protobuf:"varint,3,opt,name=detail" json:"detail,omitempty"`
}

func (m *GetChunkResponse_Tile) Reset()                    { *m = GetChunkResponse_Tile{} }
func (m *GetChunkResponse_Tile) String() string            { return proto.CompactTextString(m) }
func (*GetChunkResponse_Tile) ProtoMessage()               {}
func (*GetChunkResponse_Tile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *GetChunkResponse_Tile) GetGround() int32 {
	if m != nil {
		return m.Ground
	}
	return 0
}

func (m *GetChunkResponse_Tile) GetBlock() int32 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *GetChunkResponse_Tile) GetDetail() int32 {
	if m != nil {
		return m.Detail
	}
	return 0
}

func init() {
	proto.RegisterType((*GetChunkResponse)(nil), "UnProtos.Messaging.Responses.GetChunkResponse")
	proto.RegisterType((*GetChunkResponse_Tile)(nil), "UnProtos.Messaging.Responses.GetChunkResponse.Tile")
	proto.RegisterEnum("UnProtos.Messaging.Responses.GetChunkResponse_Result", GetChunkResponse_Result_name, GetChunkResponse_Result_value)
}

func init() {
	proto.RegisterFile("UnProtos/Messaging/Responses/GetChankResponse.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x18, 0x85, 0xed, 0x6a, 0x2a, 0xfe, 0x03, 0x29, 0x41, 0xa4, 0x88, 0x17, 0x65, 0x57, 0xbd, 0x4a,
	0x61, 0xc5, 0x27, 0x28, 0x43, 0x04, 0x27, 0x92, 0xae, 0x0f, 0xd0, 0xd9, 0x9f, 0x1a, 0x16, 0x92,
	0xd1, 0xa4, 0xe0, 0x73, 0xf9, 0x84, 0x92, 0x64, 0x9d, 0xe0, 0x85, 0xe0, 0xe5, 0xd7, 0x9e, 0xef,
	0xe4, 0x24, 0x50, 0xb5, 0xea, 0x6d, 0xd4, 0x56, 0x9b, 0x72, 0x8b, 0xc6, 0x74, 0x83, 0x50, 0x43,
	0xc9, 0xd1, 0x1c, 0xb5, 0x32, 0x68, 0xca, 0x27, 0xb4, 0xf5, 0x47, 0xa7, 0x0e, 0xf3, 0x17, 0x76,
	0x74, 0x59, 0xfa, 0x30, 0x4b, 0xec, 0x2c, 0xb1, 0xb3, 0xb4, 0xfa, 0x5a, 0x40, 0xea, 0xc5, 0xe9,
	0x47, 0xa4, 0x5b, 0x48, 0x46, 0x34, 0x93, 0xb4, 0x59, 0x94, 0x47, 0xc5, 0xcd, 0xfa, 0x91, 0xfd,
	0xd5, 0xc1, 0x7e, 0xfb, 0xee, 0xd7, 0x24, 0x2d, 0x3f, 0x95, 0xd0, 0x5b, 0x20, 0x42, 0xf5, 0xf8,
	0x99, 0x2d, 0xf2, 0xa8, 0x20, 0x3c, 0x00, 0x7d, 0x06, 0x62, 0x85, 0x44, 0x93, 0xc5, 0x79, 0x5c,
	0x2c, 0xd7, 0xd5, 0x3f, 0xcf, 0xd8, 0x09, 0x89, 0x3c, 0x34, 0xdc, 0xbf, 0xc0, 0xa5, 0x43, 0x7a,
	0x07, 0xc9, 0x30, 0xea, 0x49, 0xf5, 0x7e, 0x37, 0xe1, 0x27, 0x72, 0x03, 0xf6, 0x52, 0xbf, 0x1f,
	0xe6, 0x01, 0x1e, 0x5c, 0xba, 0x47, 0xdb, 0x09, 0x99, 0xc5, 0x21, 0x1d, 0x68, 0x95, 0x43, 0x12,
	0x2e, 0x40, 0xaf, 0x81, 0xb4, 0xaf, 0xcd, 0x66, 0x97, 0x5e, 0xd0, 0x25, 0x5c, 0x35, 0x6d, 0x5d,
	0x6f, 0x9a, 0x26, 0x8d, 0xf6, 0x89, 0x7f, 0xd9, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xfd,
	0xd1, 0x32, 0x90, 0x01, 0x00, 0x00,
}
