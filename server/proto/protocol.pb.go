// Code generated by protoc-gen-go.
// source: proto/protocol.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	proto/protocol.proto

It has these top-level messages:
	Controller
	Vec3
	PlayerPosition
	Terrain
	Chunk
	MessageItem
	MessageContainer
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MessageType определяет типы сообщений
type MessageType int32

const (
	MessageType_MsgController     MessageType = 0
	MessageType_MsgPlayerPosition MessageType = 1
	MessageType_MsgTerrain        MessageType = 2
	MessageType_MsgChunk          MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "MsgController",
	1: "MsgPlayerPosition",
	2: "MsgTerrain",
	3: "MsgChunk",
}
var MessageType_value = map[string]int32{
	"MsgController":     0,
	"MsgPlayerPosition": 1,
	"MsgTerrain":        2,
	"MsgChunk":          3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Controller определяет клавиши управления
type Controller struct {
	MoveForward  bool                  `protobuf:"varint,1,opt,name=MoveForward" json:"MoveForward,omitempty"`
	MoveBackward bool                  `protobuf:"varint,2,opt,name=MoveBackward" json:"MoveBackward,omitempty"`
	MoveLeft     bool                  `protobuf:"varint,3,opt,name=MoveLeft" json:"MoveLeft,omitempty"`
	MoveRight    bool                  `protobuf:"varint,4,opt,name=MoveRight" json:"MoveRight,omitempty"`
	RotateLeft   bool                  `protobuf:"varint,5,opt,name=RotateLeft" json:"RotateLeft,omitempty"`
	RotateRight  bool                  `protobuf:"varint,6,opt,name=RotateRight" json:"RotateRight,omitempty"`
	Modifiers    *Controller_Modifiers `protobuf:"bytes,7,opt,name=modifiers" json:"modifiers,omitempty"`
}

func (m *Controller) Reset()                    { *m = Controller{} }
func (m *Controller) String() string            { return proto.CompactTextString(m) }
func (*Controller) ProtoMessage()               {}
func (*Controller) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Controller) GetModifiers() *Controller_Modifiers {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

// Modifiers определяет клавиши-модификаторы
type Controller_Modifiers struct {
	Shift bool `protobuf:"varint,1,opt,name=Shift" json:"Shift,omitempty"`
	Ctrl  bool `protobuf:"varint,2,opt,name=Ctrl" json:"Ctrl,omitempty"`
	Alt   bool `protobuf:"varint,3,opt,name=Alt" json:"Alt,omitempty"`
	Meta  bool `protobuf:"varint,4,opt,name=Meta" json:"Meta,omitempty"`
}

func (m *Controller_Modifiers) Reset()                    { *m = Controller_Modifiers{} }
func (m *Controller_Modifiers) String() string            { return proto.CompactTextString(m) }
func (*Controller_Modifiers) ProtoMessage()               {}
func (*Controller_Modifiers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Vec3 struct {
	X float64 `protobuf:"fixed64,1,opt,name=X" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z" json:"Z,omitempty"`
}

func (m *Vec3) Reset()                    { *m = Vec3{} }
func (m *Vec3) String() string            { return proto.CompactTextString(m) }
func (*Vec3) ProtoMessage()               {}
func (*Vec3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// PlayerPosition определяет позицию и движение игрока
type PlayerPosition struct {
	// Position определяет положение игрока
	Position *Vec3 `protobuf:"bytes,1,opt,name=Position" json:"Position,omitempty"`
	// Motion определяет движение игрока
	Motion *Vec3 `protobuf:"bytes,2,opt,name=Motion" json:"Motion,omitempty"`
	// Angle определяет направление игрока (угол между положительным направленим оси Y и направлением игрока по часовой стрелке)
	Angle float64 `protobuf:"fixed64,3,opt,name=Angle" json:"Angle,omitempty"`
	// Slew определяет поворот игрока
	Slew float64 `protobuf:"fixed64,4,opt,name=Slew" json:"Slew,omitempty"`
}

func (m *PlayerPosition) Reset()                    { *m = PlayerPosition{} }
func (m *PlayerPosition) String() string            { return proto.CompactTextString(m) }
func (*PlayerPosition) ProtoMessage()               {}
func (*PlayerPosition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PlayerPosition) GetPosition() *Vec3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PlayerPosition) GetMotion() *Vec3 {
	if m != nil {
		return m.Motion
	}
	return nil
}

// Terrain определяет карту
type Terrain struct {
	// Width определяет ширину
	Width int32 `protobuf:"varint,1,opt,name=Width" json:"Width,omitempty"`
	// Height определяет высоту
	Height int32 `protobuf:"varint,2,opt,name=Height" json:"Height,omitempty"`
	// Seed определяет зерно генератора
	Seed int64 `protobuf:"varint,3,opt,name=Seed" json:"Seed,omitempty"`
	// ChunkSize определяет размер чанка
	ChunkSize int32 `protobuf:"varint,4,opt,name=ChunkSize" json:"ChunkSize,omitempty"`
}

func (m *Terrain) Reset()                    { *m = Terrain{} }
func (m *Terrain) String() string            { return proto.CompactTextString(m) }
func (*Terrain) ProtoMessage()               {}
func (*Terrain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Chunk определяет чанк карты
type Chunk struct {
	// Index определяет индекс чанка
	Index int32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	// Map определяет карту
	Map []*Chunk_Tile `protobuf:"bytes,2,rep,name=Map" json:"Map,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Chunk) GetMap() []*Chunk_Tile {
	if m != nil {
		return m.Map
	}
	return nil
}

// Tile определяет тайл карты
type Chunk_Tile struct {
	Ground int32 `protobuf:"varint,1,opt,name=Ground" json:"Ground,omitempty"`
	Block  int32 `protobuf:"varint,2,opt,name=Block" json:"Block,omitempty"`
	Detail int32 `protobuf:"varint,3,opt,name=Detail" json:"Detail,omitempty"`
}

func (m *Chunk_Tile) Reset()                    { *m = Chunk_Tile{} }
func (m *Chunk_Tile) String() string            { return proto.CompactTextString(m) }
func (*Chunk_Tile) ProtoMessage()               {}
func (*Chunk_Tile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

// MessageItem определяет одно сообщение
type MessageItem struct {
	Type MessageType `protobuf:"varint,1,opt,name=Type,enum=protocol.MessageType" json:"Type,omitempty"`
	Body []byte      `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *MessageItem) Reset()                    { *m = MessageItem{} }
func (m *MessageItem) String() string            { return proto.CompactTextString(m) }
func (*MessageItem) ProtoMessage()               {}
func (*MessageItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// MessageContainer определяет несколько сообщений
type MessageContainer struct {
	Messages []*MessageItem `protobuf:"bytes,1,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *MessageContainer) Reset()                    { *m = MessageContainer{} }
func (m *MessageContainer) String() string            { return proto.CompactTextString(m) }
func (*MessageContainer) ProtoMessage()               {}
func (*MessageContainer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MessageContainer) GetMessages() []*MessageItem {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*Controller)(nil), "protocol.Controller")
	proto.RegisterType((*Controller_Modifiers)(nil), "protocol.Controller.Modifiers")
	proto.RegisterType((*Vec3)(nil), "protocol.Vec3")
	proto.RegisterType((*PlayerPosition)(nil), "protocol.PlayerPosition")
	proto.RegisterType((*Terrain)(nil), "protocol.Terrain")
	proto.RegisterType((*Chunk)(nil), "protocol.Chunk")
	proto.RegisterType((*Chunk_Tile)(nil), "protocol.Chunk.Tile")
	proto.RegisterType((*MessageItem)(nil), "protocol.MessageItem")
	proto.RegisterType((*MessageContainer)(nil), "protocol.MessageContainer")
	proto.RegisterEnum("protocol.MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("proto/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0xed, 0xda, 0x71, 0x30, 0x93, 0x34, 0x32, 0x2b, 0xa8, 0x2c, 0x54, 0xa1, 0xc8, 0x07, 0x44,
	0x39, 0xa4, 0x6d, 0xb8, 0xf6, 0x02, 0xf4, 0x0b, 0x09, 0x4b, 0x68, 0xa1, 0x2d, 0xd0, 0x93, 0x1b,
	0x2f, 0xce, 0x0a, 0xe3, 0x8d, 0xd6, 0x4b, 0x69, 0xfa, 0x23, 0x7a, 0xe9, 0xaf, 0xec, 0xbf, 0xa8,
	0x66, 0xbc, 0x89, 0x83, 0xda, 0x8b, 0x35, 0x6f, 0xe6, 0xcd, 0x9b, 0x79, 0xde, 0x81, 0xcd, 0x99,
	0xd1, 0x56, 0xbf, 0xa4, 0xef, 0x44, 0x97, 0x23, 0x0a, 0x78, 0xb8, 0xc0, 0xc9, 0x1f, 0x0f, 0xe0,
	0x58, 0x57, 0xd6, 0xe8, 0xb2, 0x94, 0x86, 0x0f, 0xa1, 0x97, 0xea, 0xef, 0xf2, 0xbd, 0x36, 0x0f,
	0x99, 0xc9, 0x63, 0x36, 0x64, 0x7b, 0xa1, 0x58, 0x4d, 0xf1, 0x04, 0xfa, 0x08, 0x8f, 0xb2, 0xc9,
	0x2d, 0x51, 0x3c, 0xa2, 0x3c, 0xca, 0xf1, 0x6d, 0x08, 0x11, 0x9f, 0xca, 0x1b, 0x1b, 0xfb, 0x54,
	0x5f, 0x62, 0xfe, 0x1c, 0xd6, 0x31, 0x16, 0xaa, 0x98, 0xda, 0xb8, 0x43, 0xc5, 0x36, 0xc1, 0x77,
	0x00, 0x84, 0xb6, 0x99, 0x6d, 0x7a, 0x03, 0x2a, 0xaf, 0x64, 0x70, 0xbf, 0x06, 0x35, 0xfd, 0xdd,
	0x66, 0xbf, 0x95, 0x14, 0x7f, 0x03, 0xeb, 0x77, 0x3a, 0x57, 0x37, 0x4a, 0x9a, 0x3a, 0x5e, 0x1b,
	0xb2, 0xbd, 0xde, 0x78, 0x67, 0xb4, 0xb4, 0xdf, 0x5a, 0x1d, 0xa5, 0x0b, 0x96, 0x68, 0x1b, 0xb6,
	0xbf, 0xe2, 0x76, 0x0e, 0xf0, 0x4d, 0x08, 0xce, 0xa7, 0xea, 0xc6, 0xba, 0xdf, 0xd0, 0x00, 0xce,
	0xa1, 0x73, 0x6c, 0x4d, 0xe9, 0x8c, 0x53, 0xcc, 0x23, 0xf0, 0x0f, 0xcb, 0x85, 0x57, 0x0c, 0x91,
	0x95, 0x4a, 0x9b, 0x39, 0x87, 0x14, 0x27, 0xaf, 0xa0, 0xf3, 0x59, 0x4e, 0x0e, 0x78, 0x1f, 0xd8,
	0x25, 0x69, 0x32, 0xc1, 0x2e, 0x11, 0x5d, 0x91, 0x18, 0x13, 0xec, 0x0a, 0xd1, 0x35, 0xe9, 0x30,
	0xc1, 0xae, 0x93, 0x5f, 0x0c, 0x06, 0x67, 0x65, 0x36, 0x97, 0xe6, 0x4c, 0xd7, 0xca, 0x2a, 0x5d,
	0xf1, 0x7d, 0x08, 0x17, 0x31, 0x69, 0xf4, 0xc6, 0x83, 0xd6, 0x1e, 0xca, 0x8b, 0x65, 0x9d, 0xef,
	0x42, 0x37, 0xd5, 0xc4, 0xf4, 0xfe, 0xcb, 0x74, 0x55, 0x34, 0x7a, 0x58, 0x15, 0xa5, 0x74, 0x83,
	0x1b, 0x80, 0x16, 0xce, 0x4b, 0xf9, 0x40, 0x16, 0x98, 0xa0, 0x38, 0x51, 0xb0, 0x76, 0x21, 0x8d,
	0xc9, 0x14, 0x35, 0x7d, 0x51, 0xb9, 0x9d, 0xd2, 0x16, 0x81, 0x68, 0x00, 0x7f, 0x06, 0xdd, 0x8f,
	0x92, 0xde, 0xc6, 0xa3, 0xb4, 0x43, 0x24, 0x26, 0x65, 0x4e, 0x13, 0x7c, 0x41, 0x31, 0x9e, 0xc2,
	0xf1, 0xf4, 0xbe, 0xba, 0x3d, 0x57, 0x3f, 0x25, 0x4d, 0x09, 0x44, 0x9b, 0x48, 0x7e, 0x33, 0x08,
	0x08, 0xe1, 0xa4, 0x93, 0x2a, 0x97, 0x3f, 0x16, 0x93, 0x08, 0xf0, 0x5d, 0xf0, 0xd3, 0x6c, 0x16,
	0x7b, 0x43, 0x7f, 0xaf, 0x37, 0xde, 0x5c, 0x79, 0x62, 0xec, 0x19, 0x5d, 0xa8, 0x52, 0x0a, 0x24,
	0x6c, 0x9f, 0x42, 0x07, 0x01, 0x6e, 0xf6, 0xc1, 0xe8, 0xfb, 0x2a, 0x77, 0x32, 0x0e, 0xa1, 0xfa,
	0x51, 0xa9, 0x27, 0xb7, 0x6e, 0xe1, 0x06, 0x20, 0xfb, 0xad, 0xb4, 0x99, 0x2a, 0x69, 0xe3, 0x40,
	0x38, 0x94, 0x9c, 0x42, 0x2f, 0x95, 0x75, 0x9d, 0x15, 0xf2, 0xc4, 0xca, 0x3b, 0xfe, 0x02, 0x3a,
	0x17, 0xf3, 0x99, 0x24, 0xc9, 0xc1, 0x78, 0xab, 0xdd, 0xc2, 0x91, 0xb0, 0x28, 0x88, 0x82, 0x7f,
	0xe0, 0x48, 0xe7, 0x73, 0x1a, 0xd3, 0x17, 0x14, 0x27, 0xef, 0x20, 0x72, 0x44, 0x3c, 0xcc, 0x4c,
	0x55, 0xd2, 0xf0, 0xd7, 0x10, 0xba, 0x5c, 0x1d, 0x33, 0x32, 0xf7, 0xaf, 0x2c, 0xce, 0x16, 0x4b,
	0xda, 0xfe, 0xa7, 0xe5, 0x52, 0x34, 0x69, 0x03, 0x9e, 0xa6, 0x75, 0xd1, 0x9e, 0x7a, 0xf4, 0x84,
	0x6f, 0xc1, 0x46, 0x5a, 0x17, 0x8f, 0x4f, 0x29, 0x62, 0x7c, 0x00, 0x90, 0xd6, 0x85, 0x7b, 0xd1,
	0xc8, 0xe3, 0x7d, 0x08, 0xb1, 0x13, 0xff, 0x60, 0xe4, 0x7f, 0xeb, 0xd2, 0xd8, 0x83, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x90, 0x6c, 0x12, 0x3e, 0x44, 0x04, 0x00, 0x00,
}
